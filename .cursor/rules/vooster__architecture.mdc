---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **Project Overview**: 사주 풀이 웹 서비스를 Next.js 기반으로 개발하여 사용자에게 쉽고 재미있는 사주 경험을 제공하고 SNS 공유를 용이하게 한다.
- **Core Technology Stack**: Next.js 15, TypeScript, TailwindCSS, shadcn, @tanstack/react-query, OpenAI SDK, @vercel/og, date-fns 를 사용하여 빠르고 반응성 좋은 웹 페이지를 구현한다.
- **Key Technical Objectives**: 빠른 로딩 속도, 직관적인 UI, SNS 공유 기능, 그리고 다양한 화면 크기에 대응하는 반응형 디자인을 제공한다.
- **Critical Technical Assumptions**: 사주 계산 로직은 github.com/garyjeong/saju-project 오픈소스 라이브러리를 활용하며, Vercel 배포 환경을 기반으로 한다.

## 2. Tech Stack

| Category          | Technology / Library        | Reasoning (Why it's chosen for this project) |
| ----------------- | --------------------------- | -------------------------------------------- |
| 프레임워크         | Next.js 15                  | 서버 사이드 렌더링 (SSR) 및 정적 사이트 생성 (SSG) 지원, 뛰어난 성능 및 개발 편의성 제공 |
| 언어              | TypeScript                  | 코드 안정성 및 유지보수성 향상, 개발 생산성 증대 |
| 스타일링          | TailwindCSS                 | 유틸리티 기반 CSS 프레임워크, 빠른 스타일링 및 일관성 유지 |
| UI 컴포넌트       | shadcn                      | 재사용 가능한 UI 컴포넌트 제공, 디자인 시스템 구축 용이 |
| 데이터 Fetching     | @tanstack/react-query       | 서버 상태 관리 및 데이터 캐싱, 사용자 경험 향상 |
| 이미지 생성       | @vercel/og                 | 서버리스 환경에서 동적 OG 이미지 생성 지원, SNS 공유 최적화 |
| 날짜 처리         | date-fns                    | 강력한 날짜 및 시간 처리 라이브러리, 다양한 날짜 관련 기능 제공 |
| 사주 계산         | github.com/garyjeong/saju-project | 사주 계산 로직 제공, 프로젝트 핵심 기능 구현 |
| 배포              | Vercel                      | 간편한 배포 및 확장성, 서버리스 함수 지원 |

## 3. System Architecture Design

### Top-Level building blocks
- **Frontend (Next.js)**:
    - 사용자 인터페이스 및 사용자 상호 작용 처리
    - 컴포넌트 기반 아키텍처: 재사용 가능한 UI 컴포넌트 개발
    - SSR/SSG: 초기 로딩 속도 최적화 및 SEO 개선
- **Backend (Serverless Functions)**:
    - 사주 계산 로직 실행 및 API 엔드포인트 제공
    - @vercel/og 를 사용하여 동적 이미지 생성
    - 데이터 처리 및 변환 로직 포함
- **Open Source Saju Library**:
    - 사주 정보 계산 및 필요한 데이터 제공
    - 사주, 오행, 십성, 대운 등의 계산 로직 포함
- **Vercel Hosting**:
    - 웹 애플리케이션 및 서버리스 함수 호스팅
    - 자동 스케일링 및 안정적인 인프라 제공
    - CDN 지원으로 글로벌 사용자에게 빠른 콘텐츠 전송

### Top-Level Component Interaction Diagram

```mermaid
graph TD
    A[User] --> B(Next.js Frontend)
    B --> C{Serverless Functions}
    C --> D[Saju Calculation Library]
    B --> E[Vercel CDN]
```

- 사용자는 Next.js 프론트엔드를 통해 웹 서비스에 접근하고 상호 작용한다.
- Next.js 프론트엔드는 필요에 따라 서버리스 함수를 호출하여 사주 계산 로직을 실행한다.
- 서버리스 함수는 오픈소스 사주 계산 라이브러리를 사용하여 사주 정보를 계산한다.
- Vercel CDN은 전 세계 사용자에게 프론트엔드 자원을 빠르게 전송한다.

### Code Organization & Convention
**Domain-Driven Organization Strategy**
- **Domain Separation**: `components`, `pages`, `utils` 디렉토리로 분리하여 관리
- **Layer-Based Architecture**: UI 컴포넌트, 로직, 데이터 처리 계층 분리
- **Feature-Based Modules**: 사주 입력, 결과 표시, 공유 기능별 모듈화
- **Shared Components**: 재사용 가능한 UI 컴포넌트 (`Button`, `Input`, `Card`)

**Universal File & Folder Structure**
```
/
├── components/
│   ├── Input.tsx
│   ├── Button.tsx
│   ├── Card.tsx
│   ├── saju/
│   │   ├── SajuInputForm.tsx
│   │   ├── SajuResult.tsx
│   │   ├── GraphVisualization.tsx
│   │   └── TimelineVisualization.tsx
│   └── shared/
│       └── ...
├── pages/
│   ├── index.tsx
│   └── api/
│       └── og.tsx
├── utils/
│   ├── sajuCalculator.ts
│   ├── dateUtils.ts
│   └── ...
├── public/
│   ├── ...
├── styles/
│   └── globals.css
├── tsconfig.json
└── next.config.js
```

### Data Flow & Communication Patterns
- **Client-Server Communication**: Next.js API Routes 를 통해 클라이언트와 서버 간 통신
- **Database Interaction**: 데이터베이스 사용하지 않음 (사주 계산 라이브러리 활용)
- **External Service Integration**: @vercel/og 를 사용하여 동적 이미지 생성 API 호출
- **Data Synchronization**: 데이터 동기화 불필요 (단발성 사주 계산)

## 4. Performance & Optimization Strategy
- **SSR/SSG 활용**: 초기 로딩 속도 최적화
- **코드 분할 (Code Splitting)**: 필요한 컴포넌트만 로딩하여 초기 로딩 시간 단축
- **이미지 최적화**: 웹 이미지 포맷 (WebP) 및 CDN 사용
- **서버리스 함수 캐싱**: 자주 사용되는 결과 캐싱하여 응답 시간 단축

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: Next.js 프로젝트 설정, TailwindCSS 및 shadcn 설정
- **Essential Features**: 사주 정보 입력 폼, 기본 풀이 결과 표시 컴포넌트 구현
- **Basic Security**: XSS 방지
- **Development Setup**: 개발 환경 설정, CI/CD 파이프라인 구축 (Vercel)
- **Timeline**: 1주차

### Phase 2: Feature Enhancement
- **Advanced Features**: 상세 팔자 그래프 시각화, 운세 타임라인 예측 기능 구현
- **Performance Optimization**: 이미지 생성 성능 최적화, 서버리스 함수 캐싱
- **Enhanced Security**: 보안 취약점 점검 및 보완
- **Monitoring Implementation**: Vercel Analytics 를 통한 성능 모니터링 설정
- **Timeline**: 2-4주차

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
- **Technology Risks**: 사주 계산 라이브러리 정확도 문제
    - **Mitigation Strategies**: 오픈소스 라이브러리 검증 및 단위 테스트 수행
- **Performance Risks**: 이미지 생성 성능 저하
    - **Mitigation Strategies**: 서버리스 함수 캐싱 및 이미지 최적화
- **Security Risks**: XSS 공격 가능성
    - **Mitigation Strategies**: 입력 값 검증 및 HTML 엔티티 인코딩

### Project Delivery Risks
- **Timeline Risks**: 개발 일정 지연
    - **Contingency Plans**: 우선순위 조정 및 기능 축소
- **Resource Risks**: 개발 인력 부족
    - **Contingency Plans**: 오픈소스 커뮤니티 활용 및 기술 지원 요청
- **Quality Risks**: 코드 품질 저하
    - **Contingency Plans**: 코드 리뷰 및 자동화된 테스트 수행
- **Deployment Risks**: 배포 환경 문제
    - **Contingency Plans**: Vercel 지원팀과 협력 및 롤백 전략 수립

